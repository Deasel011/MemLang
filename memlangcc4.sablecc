Language memlang;

Lexer

    upper = 'A'..'Z';
    lower = 'a'..'z';
    digit = '0'..'9';
    upper_hexa = 'A'..'F';
    string_char = Any - (#10 | #13);
    not_eol = Any - (#10 | #13);
    letter = (upper | lower);

    semi = ';';
    comma = ',';
    equals = '==';
    n_equals = '!=';
    w_assign = ':=';
    assign = '=';
    le = '<=';
    lt = '<';
    ge = '>=';
    gt = '>';
    plus = '+';
    minus = '-';
    star = '*';
    slash = '/';
    percent = '%';
    not = '!';
    l_brace = '{';
    r_brace = '}';
    l_par = '(';
    r_par = ')';
    or = '||';
    vert_b = '|';
    and = '&&';

    eol = '[10+13]';

    do = 'do';
    else = 'else';
    if = 'if';
    print = 'print';
    return = 'return';
    then = 'then';
    while = 'while';

    find = 'find';
    listen = 'listen';
    define = 'define';
    pattern = 'pattern';
    play_lang = 'pl';
    target = 'target';
    address = 'add';
    agent = 'agent';


    string = '"' string_char* '"';
    number = digit+;
    comment = '#' not_eol*;
    hexa = '(digit | upper_hexa)+';

    blank = (' ')+;
    id = letter (letter | digit)*;

Token
    id;

Ignored

    blank, comment;

Parser

    program =
        {inter:} interpretor;

    interpretor =
        {target:} target value |
        {find:} find value eol;

    value =
        {hexa:} hexa |
        {string:} string |
        {num:} number;

