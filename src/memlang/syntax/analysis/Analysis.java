/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.analysis;

import memlang.syntax.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAInstProgram(AInstProgram node);
    void caseATargetInst(ATargetInst node);
    void caseAExpInst(AExpInst node);
    void caseADeclarationInst(ADeclarationInst node);
    void caseAListDeclaration(AListDeclaration node);
    void caseAAssignExp(AAssignExp node);
    void caseAFindExp(AFindExp node);
    void caseAHexaTerm(AHexaTerm node);
    void caseAStringTerm(AStringTerm node);
    void caseANumTerm(ANumTerm node);
    void caseAParTerm(AParTerm node);

    void caseTInterpretorEscape(TInterpretorEscape node);
    void caseTSemi(TSemi node);
    void caseTComma(TComma node);
    void caseTEquals(TEquals node);
    void caseTNEquals(TNEquals node);
    void caseTWAssign(TWAssign node);
    void caseTAssign(TAssign node);
    void caseTLe(TLe node);
    void caseTLt(TLt node);
    void caseTGe(TGe node);
    void caseTGt(TGt node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTPercent(TPercent node);
    void caseTNot(TNot node);
    void caseTLBrace(TLBrace node);
    void caseTRBrace(TRBrace node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTOr(TOr node);
    void caseTVertB(TVertB node);
    void caseTAnd(TAnd node);
    void caseTEol(TEol node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTIf(TIf node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTWhile(TWhile node);
    void caseTFind(TFind node);
    void caseTList(TList node);
    void caseTListen(TListen node);
    void caseTDefine(TDefine node);
    void caseTPattern(TPattern node);
    void caseTPlayLang(TPlayLang node);
    void caseTTarget(TTarget node);
    void caseTAddress(TAddress node);
    void caseTAgent(TAgent node);
    void caseTString(TString node);
    void caseTNumber(TNumber node);
    void caseTHexa(THexa node);
    void caseTComment(TComment node);
    void caseTBlank(TBlank node);
    void caseTId(TId node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
