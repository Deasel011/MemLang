/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.analysis;

import java.util.*;
import memlang.syntax.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAInstProgram(AInstProgram node)
    {
        defaultIn(node);
    }

    public void outAInstProgram(AInstProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInstProgram(AInstProgram node)
    {
        inAInstProgram(node);
        if(node.getInst() != null)
        {
            node.getInst().apply(this);
        }
        outAInstProgram(node);
    }

    public void inATargetInst(ATargetInst node)
    {
        defaultIn(node);
    }

    public void outATargetInst(ATargetInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATargetInst(ATargetInst node)
    {
        inATargetInst(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        outATargetInst(node);
    }

    public void inAExpInst(AExpInst node)
    {
        defaultIn(node);
    }

    public void outAExpInst(AExpInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpInst(AExpInst node)
    {
        inAExpInst(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpInst(node);
    }

    public void inADeclarationInst(ADeclarationInst node)
    {
        defaultIn(node);
    }

    public void outADeclarationInst(ADeclarationInst node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADeclarationInst(ADeclarationInst node)
    {
        inADeclarationInst(node);
        if(node.getDeclaration() != null)
        {
            node.getDeclaration().apply(this);
        }
        outADeclarationInst(node);
    }

    public void inAListDeclaration(AListDeclaration node)
    {
        defaultIn(node);
    }

    public void outAListDeclaration(AListDeclaration node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListDeclaration(AListDeclaration node)
    {
        inAListDeclaration(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getList() != null)
        {
            node.getList().apply(this);
        }
        outAListDeclaration(node);
    }

    public void inAAssignExp(AAssignExp node)
    {
        defaultIn(node);
    }

    public void outAAssignExp(AAssignExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignExp(AAssignExp node)
    {
        inAAssignExp(node);
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getAssign() != null)
        {
            node.getAssign().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignExp(node);
    }

    public void inAFindExp(AFindExp node)
    {
        defaultIn(node);
    }

    public void outAFindExp(AFindExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFindExp(AFindExp node)
    {
        inAFindExp(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getFind() != null)
        {
            node.getFind().apply(this);
        }
        outAFindExp(node);
    }

    public void inAHexaTerm(AHexaTerm node)
    {
        defaultIn(node);
    }

    public void outAHexaTerm(AHexaTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHexaTerm(AHexaTerm node)
    {
        inAHexaTerm(node);
        if(node.getHexa() != null)
        {
            node.getHexa().apply(this);
        }
        outAHexaTerm(node);
    }

    public void inAStringTerm(AStringTerm node)
    {
        defaultIn(node);
    }

    public void outAStringTerm(AStringTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringTerm(AStringTerm node)
    {
        inAStringTerm(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringTerm(node);
    }

    public void inANumTerm(ANumTerm node)
    {
        defaultIn(node);
    }

    public void outANumTerm(ANumTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumTerm(ANumTerm node)
    {
        inANumTerm(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParTerm(node);
    }
}
