/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.analysis;

import java.util.*;
import memlang.syntax.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAInterProgram(AInterProgram node)
    {
        defaultIn(node);
    }

    public void outAInterProgram(AInterProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAInterProgram(AInterProgram node)
    {
        inAInterProgram(node);
        if(node.getInterpretor() != null)
        {
            node.getInterpretor().apply(this);
        }
        if(node.getInterpretorEscape() != null)
        {
            node.getInterpretorEscape().apply(this);
        }
        outAInterProgram(node);
    }

    public void inATargetInterpretor(ATargetInterpretor node)
    {
        defaultIn(node);
    }

    public void outATargetInterpretor(ATargetInterpretor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATargetInterpretor(ATargetInterpretor node)
    {
        inATargetInterpretor(node);
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getTarget() != null)
        {
            node.getTarget().apply(this);
        }
        outATargetInterpretor(node);
    }

    public void inAFindInterpretor(AFindInterpretor node)
    {
        defaultIn(node);
    }

    public void outAFindInterpretor(AFindInterpretor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFindInterpretor(AFindInterpretor node)
    {
        inAFindInterpretor(node);
        if(node.getEol() != null)
        {
            node.getEol().apply(this);
        }
        if(node.getValue() != null)
        {
            node.getValue().apply(this);
        }
        if(node.getFind() != null)
        {
            node.getFind().apply(this);
        }
        outAFindInterpretor(node);
    }

    public void inAStringValue(AStringValue node)
    {
        defaultIn(node);
    }

    public void outAStringValue(AStringValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringValue(AStringValue node)
    {
        inAStringValue(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAStringValue(node);
    }

    public void inANumValue(ANumValue node)
    {
        defaultIn(node);
    }

    public void outANumValue(ANumValue node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumValue(ANumValue node)
    {
        inANumValue(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumValue(node);
    }
}
