/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.node;

import memlang.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AFindOper extends POper
{
    private TFind _find_;
    private TNumber _number_;

    public AFindOper()
    {
        // Constructor
    }

    public AFindOper(
        @SuppressWarnings("hiding") TFind _find_,
        @SuppressWarnings("hiding") TNumber _number_)
    {
        // Constructor
        setFind(_find_);

        setNumber(_number_);

    }

    @Override
    public Object clone()
    {
        return new AFindOper(
            cloneNode(this._find_),
            cloneNode(this._number_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFindOper(this);
    }

    public TFind getFind()
    {
        return this._find_;
    }

    public void setFind(TFind node)
    {
        if(this._find_ != null)
        {
            this._find_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._find_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._find_)
            + toString(this._number_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._find_ == child)
        {
            this._find_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._find_ == oldChild)
        {
            setFind((TFind) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
