/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.node;

import java.util.*;
import memlang.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AInstsProgram extends PProgram
{
    private final LinkedList<PPrecondition> _precondition_ = new LinkedList<PPrecondition>();
    private final LinkedList<PInst> _inst_ = new LinkedList<PInst>();
    private PExecute _execute_;

    public AInstsProgram()
    {
        // Constructor
    }

    public AInstsProgram(
        @SuppressWarnings("hiding") List<?> _precondition_,
        @SuppressWarnings("hiding") List<?> _inst_,
        @SuppressWarnings("hiding") PExecute _execute_)
    {
        // Constructor
        setPrecondition(_precondition_);

        setInst(_inst_);

        setExecute(_execute_);

    }

    @Override
    public Object clone()
    {
        return new AInstsProgram(
            cloneList(this._precondition_),
            cloneList(this._inst_),
            cloneNode(this._execute_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInstsProgram(this);
    }

    public LinkedList<PPrecondition> getPrecondition()
    {
        return this._precondition_;
    }

    public void setPrecondition(List<?> list)
    {
        for(PPrecondition e : this._precondition_)
        {
            e.parent(null);
        }
        this._precondition_.clear();

        for(Object obj_e : list)
        {
            PPrecondition e = (PPrecondition) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._precondition_.add(e);
        }
    }

    public LinkedList<PInst> getInst()
    {
        return this._inst_;
    }

    public void setInst(List<?> list)
    {
        for(PInst e : this._inst_)
        {
            e.parent(null);
        }
        this._inst_.clear();

        for(Object obj_e : list)
        {
            PInst e = (PInst) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._inst_.add(e);
        }
    }

    public PExecute getExecute()
    {
        return this._execute_;
    }

    public void setExecute(PExecute node)
    {
        if(this._execute_ != null)
        {
            this._execute_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._execute_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._precondition_)
            + toString(this._inst_)
            + toString(this._execute_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._precondition_.remove(child))
        {
            return;
        }

        if(this._inst_.remove(child))
        {
            return;
        }

        if(this._execute_ == child)
        {
            this._execute_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PPrecondition> i = this._precondition_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PPrecondition) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PInst> i = this._inst_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInst) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._execute_ == oldChild)
        {
            setExecute((PExecute) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
