/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.node;

import java.util.*;
import memlang.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AExecute extends PExecute
{
    private TExec _exec_;
    private TId _id_;
    private TNumber _number_;
    private TLBrace _lBrace_;
    private final LinkedList<PInst> _inst_ = new LinkedList<PInst>();
    private TRBrace _rBrace_;

    public AExecute()
    {
        // Constructor
    }

    public AExecute(
        @SuppressWarnings("hiding") TExec _exec_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TNumber _number_,
        @SuppressWarnings("hiding") TLBrace _lBrace_,
        @SuppressWarnings("hiding") List<?> _inst_,
        @SuppressWarnings("hiding") TRBrace _rBrace_)
    {
        // Constructor
        setExec(_exec_);

        setId(_id_);

        setNumber(_number_);

        setLBrace(_lBrace_);

        setInst(_inst_);

        setRBrace(_rBrace_);

    }

    @Override
    public Object clone()
    {
        return new AExecute(
            cloneNode(this._exec_),
            cloneNode(this._id_),
            cloneNode(this._number_),
            cloneNode(this._lBrace_),
            cloneList(this._inst_),
            cloneNode(this._rBrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAExecute(this);
    }

    public TExec getExec()
    {
        return this._exec_;
    }

    public void setExec(TExec node)
    {
        if(this._exec_ != null)
        {
            this._exec_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._exec_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TNumber getNumber()
    {
        return this._number_;
    }

    public void setNumber(TNumber node)
    {
        if(this._number_ != null)
        {
            this._number_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._number_ = node;
    }

    public TLBrace getLBrace()
    {
        return this._lBrace_;
    }

    public void setLBrace(TLBrace node)
    {
        if(this._lBrace_ != null)
        {
            this._lBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lBrace_ = node;
    }

    public LinkedList<PInst> getInst()
    {
        return this._inst_;
    }

    public void setInst(List<?> list)
    {
        for(PInst e : this._inst_)
        {
            e.parent(null);
        }
        this._inst_.clear();

        for(Object obj_e : list)
        {
            PInst e = (PInst) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._inst_.add(e);
        }
    }

    public TRBrace getRBrace()
    {
        return this._rBrace_;
    }

    public void setRBrace(TRBrace node)
    {
        if(this._rBrace_ != null)
        {
            this._rBrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rBrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._exec_)
            + toString(this._id_)
            + toString(this._number_)
            + toString(this._lBrace_)
            + toString(this._inst_)
            + toString(this._rBrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._exec_ == child)
        {
            this._exec_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._number_ == child)
        {
            this._number_ = null;
            return;
        }

        if(this._lBrace_ == child)
        {
            this._lBrace_ = null;
            return;
        }

        if(this._inst_.remove(child))
        {
            return;
        }

        if(this._rBrace_ == child)
        {
            this._rBrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._exec_ == oldChild)
        {
            setExec((TExec) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._number_ == oldChild)
        {
            setNumber((TNumber) newChild);
            return;
        }

        if(this._lBrace_ == oldChild)
        {
            setLBrace((TLBrace) newChild);
            return;
        }

        for(ListIterator<PInst> i = this._inst_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PInst) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rBrace_ == oldChild)
        {
            setRBrace((TRBrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
