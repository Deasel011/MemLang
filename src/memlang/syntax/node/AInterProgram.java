/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.node;

import memlang.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AInterProgram extends PProgram
{
    private TInterpretorEscape _interpretorEscape_;
    private PInterpretor _interpretor_;

    public AInterProgram()
    {
        // Constructor
    }

    public AInterProgram(
        @SuppressWarnings("hiding") TInterpretorEscape _interpretorEscape_,
        @SuppressWarnings("hiding") PInterpretor _interpretor_)
    {
        // Constructor
        setInterpretorEscape(_interpretorEscape_);

        setInterpretor(_interpretor_);

    }

    @Override
    public Object clone()
    {
        return new AInterProgram(
            cloneNode(this._interpretorEscape_),
            cloneNode(this._interpretor_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInterProgram(this);
    }

    public TInterpretorEscape getInterpretorEscape()
    {
        return this._interpretorEscape_;
    }

    public void setInterpretorEscape(TInterpretorEscape node)
    {
        if(this._interpretorEscape_ != null)
        {
            this._interpretorEscape_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interpretorEscape_ = node;
    }

    public PInterpretor getInterpretor()
    {
        return this._interpretor_;
    }

    public void setInterpretor(PInterpretor node)
    {
        if(this._interpretor_ != null)
        {
            this._interpretor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._interpretor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._interpretorEscape_)
            + toString(this._interpretor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._interpretorEscape_ == child)
        {
            this._interpretorEscape_ = null;
            return;
        }

        if(this._interpretor_ == child)
        {
            this._interpretor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._interpretorEscape_ == oldChild)
        {
            setInterpretorEscape((TInterpretorEscape) newChild);
            return;
        }

        if(this._interpretor_ == oldChild)
        {
            setInterpretor((PInterpretor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
