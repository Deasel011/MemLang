/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.node;

import memlang.syntax.analysis.*;

@SuppressWarnings("nls")
public final class AAssignInst extends PInst
{
    private TId _id_;
    private TAssign _assign_;
    private POper _oper_;

    public AAssignInst()
    {
        // Constructor
    }

    public AAssignInst(
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TAssign _assign_,
        @SuppressWarnings("hiding") POper _oper_)
    {
        // Constructor
        setId(_id_);

        setAssign(_assign_);

        setOper(_oper_);

    }

    @Override
    public Object clone()
    {
        return new AAssignInst(
            cloneNode(this._id_),
            cloneNode(this._assign_),
            cloneNode(this._oper_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAAssignInst(this);
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TAssign getAssign()
    {
        return this._assign_;
    }

    public void setAssign(TAssign node)
    {
        if(this._assign_ != null)
        {
            this._assign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assign_ = node;
    }

    public POper getOper()
    {
        return this._oper_;
    }

    public void setOper(POper node)
    {
        if(this._oper_ != null)
        {
            this._oper_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._oper_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._id_)
            + toString(this._assign_)
            + toString(this._oper_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._assign_ == child)
        {
            this._assign_ = null;
            return;
        }

        if(this._oper_ == child)
        {
            this._oper_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._assign_ == oldChild)
        {
            setAssign((TAssign) newChild);
            return;
        }

        if(this._oper_ == oldChild)
        {
            setOper((POper) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
