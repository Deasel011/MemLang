/* This file was generated by SableCC (http://www.sablecc.org/). */

package memlang.syntax.parser;

import memlang.syntax.node.*;
import memlang.syntax.analysis.*;

class TokenIndex extends AnalysisAdapter
{
    int index;

    @Override
    public void caseTInterpretorEscape(@SuppressWarnings("unused") TInterpretorEscape node)
    {
        this.index = 0;
    }

    @Override
    public void caseTSemi(@SuppressWarnings("unused") TSemi node)
    {
        this.index = 1;
    }

    @Override
    public void caseTComma(@SuppressWarnings("unused") TComma node)
    {
        this.index = 2;
    }

    @Override
    public void caseTEquals(@SuppressWarnings("unused") TEquals node)
    {
        this.index = 3;
    }

    @Override
    public void caseTNEquals(@SuppressWarnings("unused") TNEquals node)
    {
        this.index = 4;
    }

    @Override
    public void caseTWAssign(@SuppressWarnings("unused") TWAssign node)
    {
        this.index = 5;
    }

    @Override
    public void caseTAssign(@SuppressWarnings("unused") TAssign node)
    {
        this.index = 6;
    }

    @Override
    public void caseTLe(@SuppressWarnings("unused") TLe node)
    {
        this.index = 7;
    }

    @Override
    public void caseTLt(@SuppressWarnings("unused") TLt node)
    {
        this.index = 8;
    }

    @Override
    public void caseTGe(@SuppressWarnings("unused") TGe node)
    {
        this.index = 9;
    }

    @Override
    public void caseTGt(@SuppressWarnings("unused") TGt node)
    {
        this.index = 10;
    }

    @Override
    public void caseTPlus(@SuppressWarnings("unused") TPlus node)
    {
        this.index = 11;
    }

    @Override
    public void caseTMinus(@SuppressWarnings("unused") TMinus node)
    {
        this.index = 12;
    }

    @Override
    public void caseTStar(@SuppressWarnings("unused") TStar node)
    {
        this.index = 13;
    }

    @Override
    public void caseTSlash(@SuppressWarnings("unused") TSlash node)
    {
        this.index = 14;
    }

    @Override
    public void caseTPercent(@SuppressWarnings("unused") TPercent node)
    {
        this.index = 15;
    }

    @Override
    public void caseTNot(@SuppressWarnings("unused") TNot node)
    {
        this.index = 16;
    }

    @Override
    public void caseTLBrace(@SuppressWarnings("unused") TLBrace node)
    {
        this.index = 17;
    }

    @Override
    public void caseTRBrace(@SuppressWarnings("unused") TRBrace node)
    {
        this.index = 18;
    }

    @Override
    public void caseTLPar(@SuppressWarnings("unused") TLPar node)
    {
        this.index = 19;
    }

    @Override
    public void caseTRPar(@SuppressWarnings("unused") TRPar node)
    {
        this.index = 20;
    }

    @Override
    public void caseTOr(@SuppressWarnings("unused") TOr node)
    {
        this.index = 21;
    }

    @Override
    public void caseTVertB(@SuppressWarnings("unused") TVertB node)
    {
        this.index = 22;
    }

    @Override
    public void caseTAnd(@SuppressWarnings("unused") TAnd node)
    {
        this.index = 23;
    }

    @Override
    public void caseTEol(@SuppressWarnings("unused") TEol node)
    {
        this.index = 24;
    }

    @Override
    public void caseTDo(@SuppressWarnings("unused") TDo node)
    {
        this.index = 25;
    }

    @Override
    public void caseTElse(@SuppressWarnings("unused") TElse node)
    {
        this.index = 26;
    }

    @Override
    public void caseTIf(@SuppressWarnings("unused") TIf node)
    {
        this.index = 27;
    }

    @Override
    public void caseTPrint(@SuppressWarnings("unused") TPrint node)
    {
        this.index = 28;
    }

    @Override
    public void caseTReturn(@SuppressWarnings("unused") TReturn node)
    {
        this.index = 29;
    }

    @Override
    public void caseTThen(@SuppressWarnings("unused") TThen node)
    {
        this.index = 30;
    }

    @Override
    public void caseTWhile(@SuppressWarnings("unused") TWhile node)
    {
        this.index = 31;
    }

    @Override
    public void caseTFind(@SuppressWarnings("unused") TFind node)
    {
        this.index = 32;
    }

    @Override
    public void caseTList(@SuppressWarnings("unused") TList node)
    {
        this.index = 33;
    }

    @Override
    public void caseTListen(@SuppressWarnings("unused") TListen node)
    {
        this.index = 34;
    }

    @Override
    public void caseTDefine(@SuppressWarnings("unused") TDefine node)
    {
        this.index = 35;
    }

    @Override
    public void caseTPattern(@SuppressWarnings("unused") TPattern node)
    {
        this.index = 36;
    }

    @Override
    public void caseTPlayLang(@SuppressWarnings("unused") TPlayLang node)
    {
        this.index = 37;
    }

    @Override
    public void caseTTarget(@SuppressWarnings("unused") TTarget node)
    {
        this.index = 38;
    }

    @Override
    public void caseTAddress(@SuppressWarnings("unused") TAddress node)
    {
        this.index = 39;
    }

    @Override
    public void caseTAgent(@SuppressWarnings("unused") TAgent node)
    {
        this.index = 40;
    }

    @Override
    public void caseTString(@SuppressWarnings("unused") TString node)
    {
        this.index = 41;
    }

    @Override
    public void caseTNumber(@SuppressWarnings("unused") TNumber node)
    {
        this.index = 42;
    }

    @Override
    public void caseTHexa(@SuppressWarnings("unused") THexa node)
    {
        this.index = 43;
    }

    @Override
    public void caseTId(@SuppressWarnings("unused") TId node)
    {
        this.index = 44;
    }

    @Override
    public void caseEOF(@SuppressWarnings("unused") EOF node)
    {
        this.index = 45;
    }
}
