Package memlang.syntax;

Helpers

    string_char = [[32..126]-'"'];
    not_eol = [[0..0xffff]-[10+13]];

    digit = ['0'..'9'];
    letter = ['a'..'z'];

Tokens

    semi = ';';
    comma = ',';
    equals = '==';
    n_equals = '!=';
    w_assign = ':=';
    assign = '=';
    le = '<=';
    lt = '<';
    ge = '>=';
    gt = '>';
    plus = '+';
    minus = '-';
    star = '*';
    slash = '/';
    percent = '%';
    not = '!';
    l_brace = '{';
    r_brace = '}';
    l_par = '(';
    r_par = ')';
    or = '||';
    and = '&&';

    eol = '[10+13]';
    while = 'while';

    find = 'find';
    field = 'field';
    set = 'set';
    wait = 'wait';
    assert = 'assert';
    narrow = 'narrow';
    print = 'print';
    target = 'Target';
    size = 'Size';
    exec = 'exec'|'execute';
    stop = 'stop';


    string = '"' string_char* '"';
    number = digit+;
    comment = '#' not_eol*;

    blank = (' '|13|10)+;
    id = letter (letter | digit)*;



Ignored Tokens

    blank, comment;

Productions

    program =
        {insts} precondition* inst* execute?;

    precondition =
        {target} target assign string|
        {size} size assign number;

    inst =
        {declaration} field id|
        {assign} id assign oper|
        {wait} wait number|
        {set} set id number|
        {print} print id|
        {assert} assert [ids]:multiple_ids* id|
        {stop} stop id;

    multiple_ids =
        id comma;

    oper =
        {find} find number |
        {narrow} narrow sign? number;

    sign =
        {lt} lt|
        {gt} gt|
        {ge} ge|
        {le} le|
        {equals} equals;

    execute =
        exec id number l_brace inst* r_brace;